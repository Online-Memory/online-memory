{"ast":null,"code":"import { useState, useEffect } from 'react';\nconst tilesBase = {\n  id: 0,\n  ref: '01',\n  status: 'hidden',\n  owner: ''\n};\n\nconst shuffle = array => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst getRef = index => {\n  const ref = Math.floor((index + 2) / 2);\n  return ref < 10 ? `00${ref}` : `0${ref}`;\n};\n\nexport const useTiles = (rows, columns) => {\n  const [gameTiles, setGameTiles] = useState([]);\n  const gridX = new Array(rows).fill('');\n  const gridY = new Array(columns).fill('');\n  const items = rows * columns;\n  useEffect(() => {\n    const tiles = new Array(items).fill('').reduce((acc, _, currIndex) => [...acc, { ...tilesBase,\n      id: currIndex,\n      ref: getRef(currIndex)\n    }], []);\n    setGameTiles(shuffle(tiles));\n  }, [items]);\n\n  const getTile = (tiles, posX, posY, gridX) => {\n    const id = gridX * posY + posX;\n    return tiles[id];\n  };\n\n  const checkoutTile = tile => {\n    setGameTiles(tiles => {\n      return tiles.map(currTile => {\n        if (tile.id === currTile.id) {\n          return { ...currTile,\n            status: 'show'\n          };\n        }\n\n        return currTile;\n      });\n    });\n  };\n\n  return {\n    gridX,\n    gridY,\n    gameTiles,\n    getTile,\n    checkoutTile\n  };\n};","map":{"version":3,"sources":["/Users/azornada/sonny/online-memory/packages/client/src/Game/useTiles.ts"],"names":["useState","useEffect","tilesBase","id","ref","status","owner","shuffle","array","sort","Math","random","getRef","index","floor","useTiles","rows","columns","gameTiles","setGameTiles","gridX","Array","fill","gridY","items","tiles","reduce","acc","_","currIndex","getTile","posX","posY","checkoutTile","tile","map","currTile"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AASA,MAAMC,SAAe,GAAG;AACtBC,EAAAA,EAAE,EAAE,CADkB;AAEtBC,EAAAA,GAAG,EAAE,IAFiB;AAGtBC,EAAAA,MAAM,EAAE,QAHc;AAItBC,EAAAA,KAAK,EAAE;AAJe,CAAxB;;AAOA,MAAMC,OAAO,GAAIC,KAAD,IAAmB;AACjC,SAAOA,KAAK,CAACC,IAAN,CAAW,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAjC,CAAP;AACD,CAFD;;AAIA,MAAMC,MAAM,GAAIC,KAAD,IAAmB;AAChC,QAAMT,GAAG,GAAGM,IAAI,CAACI,KAAL,CAAW,CAACD,KAAK,GAAG,CAAT,IAAc,CAAzB,CAAZ;AACA,SAAOT,GAAG,GAAG,EAAN,GAAY,KAAIA,GAAI,EAApB,GAAyB,IAAGA,GAAI,EAAvC;AACD,CAHD;;AAKA,OAAO,MAAMW,QAAQ,GAAG,CAACC,IAAD,EAAeC,OAAf,KAAmC;AACzD,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAS,EAAT,CAA1C;AACA,QAAMoB,KAAK,GAAG,IAAIC,KAAJ,CAAUL,IAAV,EAAgBM,IAAhB,CAAqB,EAArB,CAAd;AACA,QAAMC,KAAK,GAAG,IAAIF,KAAJ,CAAUJ,OAAV,EAAmBK,IAAnB,CAAwB,EAAxB,CAAd;AACA,QAAME,KAAK,GAAGR,IAAI,GAAGC,OAArB;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,KAAa,GAAG,IAAIJ,KAAJ,CAAUG,KAAV,EAAiBF,IAAjB,CAAsB,EAAtB,EAA0BI,MAA1B,CACpB,CAACC,GAAD,EAAMC,CAAN,EAASC,SAAT,KAAuB,CACrB,GAAGF,GADkB,EAErB,EACE,GAAGzB,SADL;AAEEC,MAAAA,EAAE,EAAE0B,SAFN;AAGEzB,MAAAA,GAAG,EAAEQ,MAAM,CAACiB,SAAD;AAHb,KAFqB,CADH,EASpB,EAToB,CAAtB;AAYAV,IAAAA,YAAY,CAACZ,OAAO,CAACkB,KAAD,CAAR,CAAZ;AACD,GAdQ,EAcN,CAACD,KAAD,CAdM,CAAT;;AAgBA,QAAMM,OAAO,GAAG,CAACL,KAAD,EAAgBM,IAAhB,EAA8BC,IAA9B,EAA4CZ,KAA5C,KAAoE;AAClF,UAAMjB,EAAE,GAAGiB,KAAK,GAAGY,IAAR,GAAeD,IAA1B;AAEA,WAAON,KAAK,CAACtB,EAAD,CAAZ;AACD,GAJD;;AAMA,QAAM8B,YAAY,GAAIC,IAAD,IAAgB;AACnCf,IAAAA,YAAY,CAACM,KAAK,IAAI;AACpB,aAAOA,KAAK,CAACU,GAAN,CAAUC,QAAQ,IAAI;AAC3B,YAAIF,IAAI,CAAC/B,EAAL,KAAYiC,QAAQ,CAACjC,EAAzB,EAA6B;AAC3B,iBAAO,EACL,GAAGiC,QADE;AAEL/B,YAAAA,MAAM,EAAE;AAFH,WAAP;AAID;;AACD,eAAO+B,QAAP;AACD,OARM,CAAP;AASD,KAVW,CAAZ;AAWD,GAZD;;AAcA,SAAO;AACLhB,IAAAA,KADK;AAELG,IAAAA,KAFK;AAGLL,IAAAA,SAHK;AAILY,IAAAA,OAJK;AAKLG,IAAAA;AALK,GAAP;AAOD,CAjDM","sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface Tile {\n  id: number;\n  ref: string;\n  status: 'hidden' | 'show' | 'taken';\n  owner: string;\n}\n\nconst tilesBase: Tile = {\n  id: 0,\n  ref: '01',\n  status: 'hidden',\n  owner: '',\n};\n\nconst shuffle = (array: Tile[]) => {\n  return array.sort(() => Math.random() - 0.5);\n};\n\nconst getRef = (index: number) => {\n  const ref = Math.floor((index + 2) / 2);\n  return ref < 10 ? `00${ref}` : `0${ref}`;\n};\n\nexport const useTiles = (rows: number, columns: number) => {\n  const [gameTiles, setGameTiles] = useState<Tile[]>([]);\n  const gridX = new Array(rows).fill('');\n  const gridY = new Array(columns).fill('');\n  const items = rows * columns;\n\n  useEffect(() => {\n    const tiles: Tile[] = new Array(items).fill('').reduce(\n      (acc, _, currIndex) => [\n        ...acc,\n        {\n          ...tilesBase,\n          id: currIndex,\n          ref: getRef(currIndex),\n        },\n      ],\n      []\n    );\n\n    setGameTiles(shuffle(tiles));\n  }, [items]);\n\n  const getTile = (tiles: Tile[], posX: number, posY: number, gridX: number): Tile => {\n    const id = gridX * posY + posX;\n\n    return tiles[id];\n  };\n\n  const checkoutTile = (tile: Tile) => {\n    setGameTiles(tiles => {\n      return tiles.map(currTile => {\n        if (tile.id === currTile.id) {\n          return {\n            ...currTile,\n            status: 'show',\n          };\n        }\n        return currTile;\n      });\n    });\n  };\n\n  return {\n    gridX,\n    gridY,\n    gameTiles,\n    getTile,\n    checkoutTile,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}