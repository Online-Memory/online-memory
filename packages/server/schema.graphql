input UpdateUserInput {
	displayName: String!
	avatar: String!
}

input UpdateUsernameInput {
	username: String!
}

input CreateGameInput {
	name: String!
	template: String!
	tiles: Int!
}

input StartGameInput {
	gameId: String!
}

input ClaimPlayerInput {
	gameId: String!
}

input PlayTurnInput {
	gameId: String!
}

input CheckoutTileInput {
	gameId: String!
	tileId: String!
}

type InviteToGame {
	userId: String
	from: String
	gameId: String
}

type Player {
	id: String!
	status: String!
	userId: String!
	moves: Int!
	pairs: Int!
	streak: Int!
}

type PlayerTurn {
	id: String!
	status: String!
	userId: String!
	streak: Int!
	currentPlaying: String
	turn: Int
	tileRef: String
}

type Tile {
	id: Int
	ref: String
	status: String
	owner: String
}

type Board {
	gridX: Int
	gridY: Int
}

type GameUser {
  id: String
  item: User
}

type Game {
	id: String!
	createdAt: String!
	updatedAt: String!
	startedAt: String
	owner: String!
	name: String!
	status: String!
	template: String
	board: Board
	playerTurn: PlayerTurn
	players: [Player]
  users: [GameUser]!
	tiles: [Tile]
	moves: Int
}

type Templates {
	id: String
	name: String
	tiles: Int
	board: [Int]
}

interface UserData {
	id: String!
	username: String!
	displayName: String!
	avatar: String!
	createdAt: String!
	updatedAt: String!
}

type User implements UserData {
	id: String!
	username: String!
	displayName: String!
	avatar: String!
	createdAt: String!
	updatedAt: String!
}

type UserStats {
	wins: Int
	gamesPlayed: Int
	totalPairs: Int
	totalMoves: Int
	streak: Int
	gamePairs: Float
	gameStreak: Float
}

type WhoAmI implements UserData {
	id: String!
	username: String!
	displayName: String!
	avatar: String!
	createdAt: String!
	updatedAt: String!
	email: String!
	emailVerified: Boolean!
	friends: [User]!
	stats: UserStats
}

type UserGames {
	completedGames: [Game]!
	activeGames: [Game]!
}

type World {
	onlineUsers: Int!
}

type Query {
	whoAmI: WhoAmI
	getUserGames: UserGames
	templates: [Templates]
	getGame(gameId: String!): Game
	getUsers(name: String!): [User]
	getWorld: World
}

type Mutation {
	updateUser(input: UpdateUserInput!): String
	updateUsername(input: UpdateUsernameInput!): String
	startGame(input: StartGameInput!): Game
	createGame(input: CreateGameInput!): Game
	claimPlayer(input: ClaimPlayerInput!): Game
	checkoutTile(input: CheckoutTileInput!): Game
	playTurn(input: PlayTurnInput!): Game
	deleteGame(gameId: String!): Game
	inviteUser(userId: String!, gameId: String!): InviteToGame
	addFriend(userId: String!): String
	removeFriend(friendId: String!): String
}

type Subscription {
	gameUpdated(id: String!): Game @aws_subscribe(mutations: ["claimPlayer", "checkoutTile", "playTurn", "startGame"])
	invites(userId: String!): InviteToGame @aws_subscribe(mutations: ["inviteUser"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
